
# Zero Inflated PLN: $\texttt{ZIPln}$

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

## Zero Inflated PLN

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

:::{.incremental}
- Use two latent vectors $\mathbf{W}_i$ and $\mathbf{Z}_i$ to model excess of zeroes and dependence structure
$$\begin{array}{rrl}
  \text{PLN latent space} &  \boldsymbol{Z}_i  = (Z_{ij})_{j=1\dots p} & \sim  \mathcal{N}(\mathbf{x}_i^\top \mathbf{B}, \mathbf{\Sigma}), \\[1.5ex]
   \text{excess of zeros} &  \boldsymbol{W}_{i} = (W_{ij})_{j=1\dots p} & \sim \otimes_{j=1}^p \cal B(\pi_{ij}),   \\[1.5ex]
  \text{observation space} &  Y_{ij} \, | \, W_{ij}, Z_{ij} & \sim (1-W_{ij})\mathcal{P} \left(\exp\{o_{ij} + Z_{ij}\}\right),\\
\end{array}$$

- $\rightsquigarrow$ Better handling of zeros +additional interpretable parameters.

- Still overdispersion
    $$\mathbb V[Y_{ij}] > \mathbb E[Y_{ij}]$$

:::

## Zero-inflation modelling

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>


$$  \pi_{ij}  = \sigma( \boldsymbol X^{0}\boldsymbol B^0)_{ij}, ~ \boldsymbol X^0 \in \mathbb R^{n \times d_0}, ~ \boldsymbol B^0 \in \mathbb R^{d_0\times p}$$

:::{.incremental}

- Other modelling possibilities (one for all, one per dimension, etc. )

:::

## Identifiabiliy

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

Identifiability of the model is ensured if the covariates $X^0$ are full rank.

## Distribution of $W_{ij}| Y_{ij}$

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

$$W_{ij} | Y_{ij}  \sim \mathcal{B}\left(\frac{\pi_{ij}}{ \varphi\left(\mathbf{x}_i^\top \boldsymbol B_j, \Sigma_{jj}\right)
\left(1 - \pi_{ij}\right) + \pi_{ij}}\right) \boldsymbol 1_{\{Y_{ij} = 0\}}$$

with $\varphi(\mu,\sigma^2) = \mathbb E \left[ \exp(-X)\right], ~ X \sim \mathcal L \mathcal N \left( \mu, \sigma^2\right)$.

## Motivation of $\texttt{ZIPln}$: microcosm dataset [@microcosm]

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

---

<div class="footer"></div>


- Data: sequencing of the microbiota of 45 dairy cows

::: {.column width="50%" .fragment .nonincremental}

- from 4 sites:
  - vagina
  - mouth
  - nose
  - milk
:::

::: {.column width="50%" .fragment .nonincremental}
- at 4 time points:
  - 1 week before calving
  - 1 month after
  - 3 months after
  - 7 months after
:::


## Data description

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

- After data preprocessing $\implies p = 1209$ Amplicon Sequence Variants and $96$ \% zeros.

```{python}
from pyPLNmodels import load_microcosm
micro = load_microcosm(n_samples = 1000, dim = 1210)

counts_ravel = micro["endog"].values.ravel()
counts_non_zero = counts_ravel[counts_ravel >0]

total_counts = micro['endog'].sum(axis=1)

fig, axes = plt.subplots(1, 2, figsize = (11,6))

axes[0].hist(np.log(counts_non_zero), bins=30)
axes[1].hist(np.log(total_counts + 1), bins=30)
axes[0].set_xlabel('Log of non zero counts')
axes[1].set_xlabel('Log sum of counts')
axes[0].set_ylabel('Frequency')
axes[0].grid(True)
axes[1].grid(True)
axes[0].set_title("Histogram of log of non zero counts", fontsize = 20)
axes[1].set_title("Histogram of log sum of counts", fontsize = 20)
plt.show()

```

```{python}
micro = load_microcosm(n_samples = 300, dim = 500)
```


---

## $\texttt{Pln}$ versus $\texttt{ZIPln}$

<div class="footer"></div>

::: {.panel-tabset}

### Fitting


```{python}
# | echo : true
# | results: hide
zi = ZIPln.from_formula("endog ~ site + time", micro).fit()
pln = Pln.from_formula("endog ~ site + time", micro).fit()
```

### Latent space

```{python}
fig, axes = plt.subplots(1,2, figsize = (10,7))
zi.viz(colors = micro["site"] + micro["time"], ax = axes[0])
pln.viz(colors = micro["site"] + micro["time"], ax = axes[1])
axes[0].set_xlabel("PCA 1", fontsize = 25)
axes[1].set_xlabel("PCA 1", fontsize = 25)
axes[0].set_ylabel("PCA 2", fontsize = 25)
axes[0].set_title("ZIPLN")
axes[1].set_title("PLN")
axes[1].get_legend().set_visible(False)
plt.show()
```

### $\Sigma$

```{python}
fig, axes = plt.subplots(1,2, figsize = (12,7))
sns.heatmap(zi.covariance, ax = axes[0])
sns.heatmap(pln.covariance, ax = axes[1])
axes[0].set_title(r"ZIPln covariance ($\Sigma$)", fontsize = 25)
axes[1].set_title(r"Pln covariance ($\Sigma$)", fontsize = 25)
plt.show()
```



:::
