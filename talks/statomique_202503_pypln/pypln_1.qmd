---

# $\texttt{pyPLNmodels}$


<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

## About PLNmodels


<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

::: {.incremental}
- $\texttt{pyPLNmodels}$ is the equivalent python package of the R package $\texttt{PLNmodels}$ [@PLNmodels].
- With some hindsight
- Emphasis is given on the optimization: simple and efficient.
- Implementation of $\texttt{PlnAR}$ and $\texttt{ZIPlnPCA}$ models
:::


## How to fit a model


<div class="footer">$\texttt{pip install pyPLNmodels}$</div>



#### Like R-formula


```{python}
# | echo: true
from pyPLNmodels import Pln
pln = Pln.from_formula("endog ~ labels ", data = rna)
_ = pln.fit()
```

```{python}
del(pln)
```

:::{.fragment}


#### Explicitly


```{python}
# | echo: true
from pyPLNmodels import Pln
pln = Pln(rna["endog"], exog = rna["labels_1hot"], add_const = False)
_ = pln.fit()
```
:::

---

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

### Attributes and method
Available when calling $\texttt{print(model)}$`:
```{python}
# | echo: true
print(pln)
```

---
## Insights


<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

```{python}
# | echo: true
pln.show(figsize = (10, 8))
```


## Insights

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

```{python}
# | echo: true
pln.plot_regression_forest(figsize = (11,6))
```

---

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

:::{.panel-tabset}

###  Genes correlation

:::{.incremental}

- The $\texttt{PlnNetwork}$ allows to infer genes that are highly correlated, by imposing a constraint:

- $$\| \Sigma^{-1} \|_1 \leq \text{penalty}$$

- $$\Sigma^{-1}_{ij} = \text{Corr}(Z_i, Z_j)$$

-  Still differentiable ELBO.

:::

### Network visualization

```{python, .incremental}
# | echo: true
#| output-location: slide
from pyPLNmodels import PlnNetwork
net = PlnNetwork(rna["endog"], penalty = 2000, compute_offsets_method = "logsum").fit()
fig, ax = plt.subplots(1, 1, figsize = (12, 5))
net.viz_network(ax=ax)
```

```{python}
del(net)
```



:::

