---
title: "`pyPLNmodels`: analyze multivariate count data"
subtitle: "Groupe de travail StatOmique"
author:
  - name: "**Bastien Batardi√®re**"
    affiliations: MIA Paris-Saclay, INRAE
  - name: Joon Kwon
    affiliations: MIA Paris-Saclay, INRAE
  - name: Mahendra Mariadassou
    affiliations: MaIAGE, INRAE
  - name: Julien Chiquet
    affiliations: MIA Paris-Saclay, INRAE

date: today
date-format: long
mainfont: Poppins
format:
  inrae-revealjs:
    lang: fr
    height: 780
    margin: 0.2
bibliography: ref.bib
execute:
    cache: true
---

{{< include introduction.qmd >}}


{{< include plnbackground.qmd >}}

{{< include pypln_1.qmd >}}

{{< include pypln_2.qmd >}}

{{< include zipln.qmd >}}

# Autoregressive Pln: $\texttt{PlnAR}$
<div class="footer">$\texttt{pip install pyPLNmodels}$</div>


:::{.incremental}

  - Assume dependency between individuals $\implies$ Time series or spatial 1D:
  $$
  \begin{aligned}
  \mathbf{Z}_{i+1}|\mathbf Z_i & \sim \Phi \mathbf Z_i  + \epsilon_i \\
  \epsilon_i & \sim \mathcal{N}(\Phi \mu_i, \boldsymbol\Sigma_{\epsilon} )\\
  \mathbf{Y}_{i+1} & \sim \mathcal{P}(\exp(\mathbf Z_{i+1}))
  \end{aligned}
  $$
  - Constraint:
    $$ \boldsymbol \Sigma_{\epsilon} = \Sigma - \Phi \boldsymbol \Sigma \Phi^\top \succ 0$$
  - Marginal laws:
    $$\mathbf{Z}_i \sim \mathcal{N}(\mu_i, \boldsymbol\Sigma)$$

:::

# Autoregressive constraints

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

$$\boldsymbol \Sigma_{\epsilon} = \boldsymbol \Sigma - \Phi\boldsymbol  \Sigma \Phi^\top \succ 0$$

:::{.incremental}
- "Easy" cases:

    -  $\boldsymbol \Sigma$ diagonal  and $1 \succ \Phi \succ 0$ diagonal
    -  $\boldsymbol \Sigma$ full and $1 > \Phi > 0$ scalar

- Non positive definite case:
    - $\boldsymbol \Sigma$ full and $1 \succ \Phi \succ 0$ diagonal $\implies$  $\boldsymbol \Sigma_{\epsilon}$ non definite positive

- More complex case:

    - $\boldsymbol \Sigma$ full and $1 \succ \Phi \succ 0$ full

:::

## Autoregressive constraints

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

$$
\begin{array}{c|cc}
\Phi \ \backslash \ \Sigma  & \text{Diagonal} & \text{Full} \\
\hline
\text{Scalar}    & \checkmark & \checkmark \\
\text{Diagonal}  & \checkmark & \times \\
\text{Full}      & \times & ?? \\
\end{array}
$$


## Motivation: crossover dataset

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

:::{.incremental}

- Data: number of exchange of genetic material between two DNA strand in a loci.

- All the 27 chromosomes placed end to end $\implies$ **500 loci**, for $\textbf{4 different species of sheep}$.

- $\implies$ 4 time series of 500 loci. Each loci depends on the previous one.

:::

## $\texttt{PlnAR}$ diagonal

<div class="footer"></div>

:::{.panel-tabset}


### Fitting

```{python}
# | echo: true
from pyPLNmodels import load_crossover, PlnAR
cross = load_crossover()
ar = PlnAR(cross["endog"], ar_type = "diagonal").fit()
```


### Latent space

```{python}
ar.viz_dims(indices_of_variables = [0,1,2,3], variable_names = ["Sheep 1", "Sheep 2", "Sheep 3", "Sheep 4"])
```

### Autoregressive structure

```{python}
fig, ax = plt.subplots(figsize = (10,7))
ar._get_model_viz().display_autoreg(ax = ax)
ax.set_xticklabels(["Sheep 1", "Sheep 2", "Sheep 3", "Sheep 4"], fontsize = 12)
plt.show()
```
:::

## Conclusion

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

:::{.incremental}

- $\texttt{pyPLNmodels}$ easy to use for many statistical tasks for count data
- Focus on optimization and scalability when possible.
- Majority of models gives out of memory error for $n,p> 3000$ in CPU.

:::

## What's next?

<div class="footer">$\texttt{pip install pyPLNmodels}$</div>

:::{.incremental}

- Implement a $\texttt{PlnAR}$ with full autoregressive structure.
- Implement a collection of $\texttt{PlnNetwork}$ and $\texttt{PlnMixture}$ to directly find the BIC of the best model.
- Make it worldwide

:::


## References
